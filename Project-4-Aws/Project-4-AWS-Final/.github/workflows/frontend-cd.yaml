name: cd-frontend-workflow

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{vars.NODE_VERSION}}

      - name: Install dependencies
        run: npm install
        working-directory: ${{vars.WORKING_DIRECTORY_FE}}

      - name: Run linter
        run: npm run lint
        working-directory: ${{vars.WORKING_DIRECTORY_FE}}

  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{vars.NODE_VERSION}}

      - name: Install dependencies
        run: npm install
        working-directory: ${{vars.WORKING_DIRECTORY_FE}}

      - name: Run tests
        run: npm run test
        working-directory: ${{vars.WORKING_DIRECTORY_FE}}

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: 'v1.21.0'

      - name: Setup cluster
        run: aws eks --region ${{vars.AWS_REGION}} update-kubeconfig --name ${{vars.CLUSTER_NAME}}

      - name: cluster
        run: kubectl get svc backend

      - name: get EXTERNALIP BE
        run: |
          export API_BE=$(kubectl get svc backend -o=jsonpath='{.status.loadBalancer.ingress[0].hostname}')

      - name: Get external IP of backend service
        id: get_external_ip
        run: |
          API_BE=$(kubectl get svc backend -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          if [ -z "$API_BE" ]; then
            API_BE=$(kubectl get svc backend -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          fi
          echo "API_BE=$API_BE" >> $GITHUB_ENV
          echo "Retrieved API backend IP/Hostname: $API_BE"

      - name: Output external IP
        run: echo "External IP of backend service is ${{ env.API_BE }}"

      - name: IP backend
        run: echo ${{env.API_BE}}

      - name: Build Docker image
        run: |
          docker build \
          --build-arg REACT_APP_MOVIE_API_URL=http://${{env.API_BE}} \
          -t ${{ vars.IMAGES_NAME_FE }}:latest .
        working-directory: ${{vars.WORKING_DIRECTORY_FE}}

  login-ecr:
    needs: build
    runs-on: ubuntu-latest
    steps:

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

  push-ecr:
    needs: login-ecr
    runs-on: ubuntu-latest
    steps:

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: |
          docker build \
          -t ${{ vars.IMAGES_NAME_FE }}:latest .
        working-directory: ${{vars.WORKING_DIRECTORY_FE}}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: List Docker images
        run: docker images

      - name: Push to ECR
        run: docker push ${{ vars.ECR_REPOSITORY_FE }}/${{ vars.IMAGES_NAME_FE }}:latest

  deploy:
    needs: push-ecr
    runs-on: ubuntu-latest
    steps:

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: 'v1.21.0'

      - name: Setup cluster
        run: aws eks --region ${{vars.AWS_REGION}} update-kubeconfig --name ${{vars.CLUSTER_NAME}}

      - name: Deploy to Kubernetes
        run: |
          kustomize build | kubectl apply -f -
        working-directory: ${{vars.WORKING_DIRECTORY_EKS_FE}}