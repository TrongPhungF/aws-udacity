name: cd-backend-workflow

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          node-version: ${{env.PYTHON_VERSION}}

      - name: Cache pipenv virtual environment
        uses: actions/cache@v3
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pipenv-

      - name: Install pipenv
        run: pip install pipenv
        working-directory: ${{vars.WORKING_DIRECTORY_BE}}

      - name: Install dependencies
        run: pipenv install --dev
        working-directory: ${{vars.WORKING_DIRECTORY_BE}}

      - name: Run the lint
        run: pipenv run lint
        working-directory: ${{vars.WORKING_DIRECTORY_BE}}

  test:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          node-version: ${{vars.PYTHON_VERSION}}

      - name: Cache pipenv virtual environment
        uses: actions/cache@v3
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pipenv-

      - name: Install pipenv
        run: pip install pipenv
        working-directory: ${{vars.WORKING_DIRECTORY_BE}}

      - name: Install dependencies
        run: pipenv install --dev
        working-directory: ${{vars.WORKING_DIRECTORY_BE}}

      - name: Run tests
        run: pipenv run test
        working-directory: ${{vars.WORKING_DIRECTORY_BE}}

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: |
          docker build \
            -t ${{ vars.IMAGES_NAME_BE }}:latest .
        working-directory: ${{vars.WORKING_DIRECTORY_BE}}

  login-ecr:
    needs: build
    runs-on: ubuntu-latest
    steps:

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

  push-ecr:
    needs: login-ecr
    runs-on: ubuntu-latest
    steps:

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: |
          docker build \
            -t ${{ vars.IMAGES_NAME_BE }}:latest .
        working-directory: ${{vars.WORKING_DIRECTORY_BE}}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: List Docker images
        run: docker images

      - name: Push to ECR
        run: docker push ${{ vars.ECR_REPOSITORY_BE }}/${{ vars.IMAGES_NAME_BE }}:latest

  deploy:
    needs: push-ecr
    runs-on: ubuntu-latest

    steps:

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: 'v1.21.0'

      - name: Setup cluster
        run: aws eks --region ${{vars.AWS_REGION}} update-kubeconfig --name ${{vars.CLUSTER_NAME}}

      - name: Deploy to Kubernetes
        run: |
          kustomize build | kubectl apply -f -
        working-directory: ${{vars.WORKING_DIRECTORY_EKS_BE}}